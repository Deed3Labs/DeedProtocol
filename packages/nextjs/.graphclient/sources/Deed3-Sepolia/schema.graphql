schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Approval {
  id: Bytes!
  owner: Bytes!
  approved: Bytes!
  tokenId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll {
  id: Bytes!
  owner: Bytes!
  operator: Bytes!
  approved: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ApprovalForAll_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  operator: Bytes
  operator_not: Bytes
  operator_gt: Bytes
  operator_lt: Bytes
  operator_gte: Bytes
  operator_lte: Bytes
  operator_in: [Bytes!]
  operator_not_in: [Bytes!]
  operator_contains: Bytes
  operator_not_contains: Bytes
  approved: Boolean
  approved_not: Boolean
  approved_in: [Boolean!]
  approved_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ApprovalForAll_filter]
  or: [ApprovalForAll_filter]
}

enum ApprovalForAll_orderBy {
  id
  owner
  operator
  approved
  blockNumber
  blockTimestamp
  transactionHash
}

input Approval_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  approved: Bytes
  approved_not: Bytes
  approved_gt: Bytes
  approved_lt: Bytes
  approved_gte: Bytes
  approved_lte: Bytes
  approved_in: [Bytes!]
  approved_not_in: [Bytes!]
  approved_contains: Bytes
  approved_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Approval_filter]
  or: [Approval_filter]
}

enum Approval_orderBy {
  id
  owner
  approved
  tokenId
  blockNumber
  blockTimestamp
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DeedEntity {
  id: ID!
  deedId: BigInt!
  owner: Bytes!
  assetType: Int!
  isValidated: Boolean!
  minter: Bytes!
  uri: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  deedMetadata: DeedMetadata!
}

input DeedEntity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  deedId: BigInt
  deedId_not: BigInt
  deedId_gt: BigInt
  deedId_lt: BigInt
  deedId_gte: BigInt
  deedId_lte: BigInt
  deedId_in: [BigInt!]
  deedId_not_in: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  assetType: Int
  assetType_not: Int
  assetType_gt: Int
  assetType_lt: Int
  assetType_gte: Int
  assetType_lte: Int
  assetType_in: [Int!]
  assetType_not_in: [Int!]
  isValidated: Boolean
  isValidated_not: Boolean
  isValidated_in: [Boolean!]
  isValidated_not_in: [Boolean!]
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  deedMetadata: String
  deedMetadata_not: String
  deedMetadata_gt: String
  deedMetadata_lt: String
  deedMetadata_gte: String
  deedMetadata_lte: String
  deedMetadata_in: [String!]
  deedMetadata_not_in: [String!]
  deedMetadata_contains: String
  deedMetadata_contains_nocase: String
  deedMetadata_not_contains: String
  deedMetadata_not_contains_nocase: String
  deedMetadata_starts_with: String
  deedMetadata_starts_with_nocase: String
  deedMetadata_not_starts_with: String
  deedMetadata_not_starts_with_nocase: String
  deedMetadata_ends_with: String
  deedMetadata_ends_with_nocase: String
  deedMetadata_not_ends_with: String
  deedMetadata_not_ends_with_nocase: String
  deedMetadata_: DeedMetadata_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DeedEntity_filter]
  or: [DeedEntity_filter]
}

enum DeedEntity_orderBy {
  id
  deedId
  owner
  assetType
  isValidated
  minter
  uri
  blockNumber
  blockTimestamp
  transactionHash
  deedMetadata
  deedMetadata__id
  deedMetadata__ownerInformation_type
  deedMetadata__ownerInformation_name
  deedMetadata__ownerInformation_position
  deedMetadata__ownerInformation_entityName
  deedMetadata__ownerInformation_entityType
  deedMetadata__propertyDetails_type
  deedMetadata__propertyDetails_address
  deedMetadata__propertyDetails_city
  deedMetadata__propertyDetails_state
  deedMetadata__propertyDetails_size
  deedMetadata__propertyDetails_subType
  deedMetadata__propertyDetails_zoning
  deedMetadata__otherInformation_blockchain
  deedMetadata__otherInformation_wrapper
}

type DeedMetadata {
  id: ID!
  ownerInformation_type: String!
  ownerInformation_name: String!
  ownerInformation_position: String
  ownerInformation_entityName: String
  ownerInformation_entityType: String
  ownerInformation_ids: FileInfo!
  ownerInformation_operatingAgreement: FileInfo
  ownerInformation_articleIncorporation: FileInfo!
  ownerInformation_proofBill: FileInfo
  ownerInformation_supportingDoc(skip: Int = 0, first: Int = 100, orderBy: FileInfo_orderBy, orderDirection: OrderDirection, where: FileInfo_filter): [FileInfo!]
  propertyDetails_type: String!
  propertyDetails_address: String!
  propertyDetails_city: String!
  propertyDetails_state: String!
  propertyDetails_size: String
  propertyDetails_subType: String
  propertyDetails_zoning: String
  propertyDetails_purchaseContract: FileInfo
  propertyDetails_deedOrTitle: FileInfo!
  propertyDetails_images(skip: Int = 0, first: Int = 100, orderBy: FileInfo_orderBy, orderDirection: OrderDirection, where: FileInfo_filter): [FileInfo!]
  otherInformation_blockchain: String!
  otherInformation_wrapper: String!
}

input DeedMetadata_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ownerInformation_type: String
  ownerInformation_type_not: String
  ownerInformation_type_gt: String
  ownerInformation_type_lt: String
  ownerInformation_type_gte: String
  ownerInformation_type_lte: String
  ownerInformation_type_in: [String!]
  ownerInformation_type_not_in: [String!]
  ownerInformation_type_contains: String
  ownerInformation_type_contains_nocase: String
  ownerInformation_type_not_contains: String
  ownerInformation_type_not_contains_nocase: String
  ownerInformation_type_starts_with: String
  ownerInformation_type_starts_with_nocase: String
  ownerInformation_type_not_starts_with: String
  ownerInformation_type_not_starts_with_nocase: String
  ownerInformation_type_ends_with: String
  ownerInformation_type_ends_with_nocase: String
  ownerInformation_type_not_ends_with: String
  ownerInformation_type_not_ends_with_nocase: String
  ownerInformation_name: String
  ownerInformation_name_not: String
  ownerInformation_name_gt: String
  ownerInformation_name_lt: String
  ownerInformation_name_gte: String
  ownerInformation_name_lte: String
  ownerInformation_name_in: [String!]
  ownerInformation_name_not_in: [String!]
  ownerInformation_name_contains: String
  ownerInformation_name_contains_nocase: String
  ownerInformation_name_not_contains: String
  ownerInformation_name_not_contains_nocase: String
  ownerInformation_name_starts_with: String
  ownerInformation_name_starts_with_nocase: String
  ownerInformation_name_not_starts_with: String
  ownerInformation_name_not_starts_with_nocase: String
  ownerInformation_name_ends_with: String
  ownerInformation_name_ends_with_nocase: String
  ownerInformation_name_not_ends_with: String
  ownerInformation_name_not_ends_with_nocase: String
  ownerInformation_position: String
  ownerInformation_position_not: String
  ownerInformation_position_gt: String
  ownerInformation_position_lt: String
  ownerInformation_position_gte: String
  ownerInformation_position_lte: String
  ownerInformation_position_in: [String!]
  ownerInformation_position_not_in: [String!]
  ownerInformation_position_contains: String
  ownerInformation_position_contains_nocase: String
  ownerInformation_position_not_contains: String
  ownerInformation_position_not_contains_nocase: String
  ownerInformation_position_starts_with: String
  ownerInformation_position_starts_with_nocase: String
  ownerInformation_position_not_starts_with: String
  ownerInformation_position_not_starts_with_nocase: String
  ownerInformation_position_ends_with: String
  ownerInformation_position_ends_with_nocase: String
  ownerInformation_position_not_ends_with: String
  ownerInformation_position_not_ends_with_nocase: String
  ownerInformation_entityName: String
  ownerInformation_entityName_not: String
  ownerInformation_entityName_gt: String
  ownerInformation_entityName_lt: String
  ownerInformation_entityName_gte: String
  ownerInformation_entityName_lte: String
  ownerInformation_entityName_in: [String!]
  ownerInformation_entityName_not_in: [String!]
  ownerInformation_entityName_contains: String
  ownerInformation_entityName_contains_nocase: String
  ownerInformation_entityName_not_contains: String
  ownerInformation_entityName_not_contains_nocase: String
  ownerInformation_entityName_starts_with: String
  ownerInformation_entityName_starts_with_nocase: String
  ownerInformation_entityName_not_starts_with: String
  ownerInformation_entityName_not_starts_with_nocase: String
  ownerInformation_entityName_ends_with: String
  ownerInformation_entityName_ends_with_nocase: String
  ownerInformation_entityName_not_ends_with: String
  ownerInformation_entityName_not_ends_with_nocase: String
  ownerInformation_entityType: String
  ownerInformation_entityType_not: String
  ownerInformation_entityType_gt: String
  ownerInformation_entityType_lt: String
  ownerInformation_entityType_gte: String
  ownerInformation_entityType_lte: String
  ownerInformation_entityType_in: [String!]
  ownerInformation_entityType_not_in: [String!]
  ownerInformation_entityType_contains: String
  ownerInformation_entityType_contains_nocase: String
  ownerInformation_entityType_not_contains: String
  ownerInformation_entityType_not_contains_nocase: String
  ownerInformation_entityType_starts_with: String
  ownerInformation_entityType_starts_with_nocase: String
  ownerInformation_entityType_not_starts_with: String
  ownerInformation_entityType_not_starts_with_nocase: String
  ownerInformation_entityType_ends_with: String
  ownerInformation_entityType_ends_with_nocase: String
  ownerInformation_entityType_not_ends_with: String
  ownerInformation_entityType_not_ends_with_nocase: String
  ownerInformation_ids: String
  ownerInformation_ids_not: String
  ownerInformation_ids_gt: String
  ownerInformation_ids_lt: String
  ownerInformation_ids_gte: String
  ownerInformation_ids_lte: String
  ownerInformation_ids_in: [String!]
  ownerInformation_ids_not_in: [String!]
  ownerInformation_ids_contains: String
  ownerInformation_ids_contains_nocase: String
  ownerInformation_ids_not_contains: String
  ownerInformation_ids_not_contains_nocase: String
  ownerInformation_ids_starts_with: String
  ownerInformation_ids_starts_with_nocase: String
  ownerInformation_ids_not_starts_with: String
  ownerInformation_ids_not_starts_with_nocase: String
  ownerInformation_ids_ends_with: String
  ownerInformation_ids_ends_with_nocase: String
  ownerInformation_ids_not_ends_with: String
  ownerInformation_ids_not_ends_with_nocase: String
  ownerInformation_ids_: FileInfo_filter
  ownerInformation_operatingAgreement: String
  ownerInformation_operatingAgreement_not: String
  ownerInformation_operatingAgreement_gt: String
  ownerInformation_operatingAgreement_lt: String
  ownerInformation_operatingAgreement_gte: String
  ownerInformation_operatingAgreement_lte: String
  ownerInformation_operatingAgreement_in: [String!]
  ownerInformation_operatingAgreement_not_in: [String!]
  ownerInformation_operatingAgreement_contains: String
  ownerInformation_operatingAgreement_contains_nocase: String
  ownerInformation_operatingAgreement_not_contains: String
  ownerInformation_operatingAgreement_not_contains_nocase: String
  ownerInformation_operatingAgreement_starts_with: String
  ownerInformation_operatingAgreement_starts_with_nocase: String
  ownerInformation_operatingAgreement_not_starts_with: String
  ownerInformation_operatingAgreement_not_starts_with_nocase: String
  ownerInformation_operatingAgreement_ends_with: String
  ownerInformation_operatingAgreement_ends_with_nocase: String
  ownerInformation_operatingAgreement_not_ends_with: String
  ownerInformation_operatingAgreement_not_ends_with_nocase: String
  ownerInformation_operatingAgreement_: FileInfo_filter
  ownerInformation_articleIncorporation: String
  ownerInformation_articleIncorporation_not: String
  ownerInformation_articleIncorporation_gt: String
  ownerInformation_articleIncorporation_lt: String
  ownerInformation_articleIncorporation_gte: String
  ownerInformation_articleIncorporation_lte: String
  ownerInformation_articleIncorporation_in: [String!]
  ownerInformation_articleIncorporation_not_in: [String!]
  ownerInformation_articleIncorporation_contains: String
  ownerInformation_articleIncorporation_contains_nocase: String
  ownerInformation_articleIncorporation_not_contains: String
  ownerInformation_articleIncorporation_not_contains_nocase: String
  ownerInformation_articleIncorporation_starts_with: String
  ownerInformation_articleIncorporation_starts_with_nocase: String
  ownerInformation_articleIncorporation_not_starts_with: String
  ownerInformation_articleIncorporation_not_starts_with_nocase: String
  ownerInformation_articleIncorporation_ends_with: String
  ownerInformation_articleIncorporation_ends_with_nocase: String
  ownerInformation_articleIncorporation_not_ends_with: String
  ownerInformation_articleIncorporation_not_ends_with_nocase: String
  ownerInformation_articleIncorporation_: FileInfo_filter
  ownerInformation_proofBill: String
  ownerInformation_proofBill_not: String
  ownerInformation_proofBill_gt: String
  ownerInformation_proofBill_lt: String
  ownerInformation_proofBill_gte: String
  ownerInformation_proofBill_lte: String
  ownerInformation_proofBill_in: [String!]
  ownerInformation_proofBill_not_in: [String!]
  ownerInformation_proofBill_contains: String
  ownerInformation_proofBill_contains_nocase: String
  ownerInformation_proofBill_not_contains: String
  ownerInformation_proofBill_not_contains_nocase: String
  ownerInformation_proofBill_starts_with: String
  ownerInformation_proofBill_starts_with_nocase: String
  ownerInformation_proofBill_not_starts_with: String
  ownerInformation_proofBill_not_starts_with_nocase: String
  ownerInformation_proofBill_ends_with: String
  ownerInformation_proofBill_ends_with_nocase: String
  ownerInformation_proofBill_not_ends_with: String
  ownerInformation_proofBill_not_ends_with_nocase: String
  ownerInformation_proofBill_: FileInfo_filter
  ownerInformation_supportingDoc: [String!]
  ownerInformation_supportingDoc_not: [String!]
  ownerInformation_supportingDoc_contains: [String!]
  ownerInformation_supportingDoc_contains_nocase: [String!]
  ownerInformation_supportingDoc_not_contains: [String!]
  ownerInformation_supportingDoc_not_contains_nocase: [String!]
  ownerInformation_supportingDoc_: FileInfo_filter
  propertyDetails_type: String
  propertyDetails_type_not: String
  propertyDetails_type_gt: String
  propertyDetails_type_lt: String
  propertyDetails_type_gte: String
  propertyDetails_type_lte: String
  propertyDetails_type_in: [String!]
  propertyDetails_type_not_in: [String!]
  propertyDetails_type_contains: String
  propertyDetails_type_contains_nocase: String
  propertyDetails_type_not_contains: String
  propertyDetails_type_not_contains_nocase: String
  propertyDetails_type_starts_with: String
  propertyDetails_type_starts_with_nocase: String
  propertyDetails_type_not_starts_with: String
  propertyDetails_type_not_starts_with_nocase: String
  propertyDetails_type_ends_with: String
  propertyDetails_type_ends_with_nocase: String
  propertyDetails_type_not_ends_with: String
  propertyDetails_type_not_ends_with_nocase: String
  propertyDetails_address: String
  propertyDetails_address_not: String
  propertyDetails_address_gt: String
  propertyDetails_address_lt: String
  propertyDetails_address_gte: String
  propertyDetails_address_lte: String
  propertyDetails_address_in: [String!]
  propertyDetails_address_not_in: [String!]
  propertyDetails_address_contains: String
  propertyDetails_address_contains_nocase: String
  propertyDetails_address_not_contains: String
  propertyDetails_address_not_contains_nocase: String
  propertyDetails_address_starts_with: String
  propertyDetails_address_starts_with_nocase: String
  propertyDetails_address_not_starts_with: String
  propertyDetails_address_not_starts_with_nocase: String
  propertyDetails_address_ends_with: String
  propertyDetails_address_ends_with_nocase: String
  propertyDetails_address_not_ends_with: String
  propertyDetails_address_not_ends_with_nocase: String
  propertyDetails_city: String
  propertyDetails_city_not: String
  propertyDetails_city_gt: String
  propertyDetails_city_lt: String
  propertyDetails_city_gte: String
  propertyDetails_city_lte: String
  propertyDetails_city_in: [String!]
  propertyDetails_city_not_in: [String!]
  propertyDetails_city_contains: String
  propertyDetails_city_contains_nocase: String
  propertyDetails_city_not_contains: String
  propertyDetails_city_not_contains_nocase: String
  propertyDetails_city_starts_with: String
  propertyDetails_city_starts_with_nocase: String
  propertyDetails_city_not_starts_with: String
  propertyDetails_city_not_starts_with_nocase: String
  propertyDetails_city_ends_with: String
  propertyDetails_city_ends_with_nocase: String
  propertyDetails_city_not_ends_with: String
  propertyDetails_city_not_ends_with_nocase: String
  propertyDetails_state: String
  propertyDetails_state_not: String
  propertyDetails_state_gt: String
  propertyDetails_state_lt: String
  propertyDetails_state_gte: String
  propertyDetails_state_lte: String
  propertyDetails_state_in: [String!]
  propertyDetails_state_not_in: [String!]
  propertyDetails_state_contains: String
  propertyDetails_state_contains_nocase: String
  propertyDetails_state_not_contains: String
  propertyDetails_state_not_contains_nocase: String
  propertyDetails_state_starts_with: String
  propertyDetails_state_starts_with_nocase: String
  propertyDetails_state_not_starts_with: String
  propertyDetails_state_not_starts_with_nocase: String
  propertyDetails_state_ends_with: String
  propertyDetails_state_ends_with_nocase: String
  propertyDetails_state_not_ends_with: String
  propertyDetails_state_not_ends_with_nocase: String
  propertyDetails_size: String
  propertyDetails_size_not: String
  propertyDetails_size_gt: String
  propertyDetails_size_lt: String
  propertyDetails_size_gte: String
  propertyDetails_size_lte: String
  propertyDetails_size_in: [String!]
  propertyDetails_size_not_in: [String!]
  propertyDetails_size_contains: String
  propertyDetails_size_contains_nocase: String
  propertyDetails_size_not_contains: String
  propertyDetails_size_not_contains_nocase: String
  propertyDetails_size_starts_with: String
  propertyDetails_size_starts_with_nocase: String
  propertyDetails_size_not_starts_with: String
  propertyDetails_size_not_starts_with_nocase: String
  propertyDetails_size_ends_with: String
  propertyDetails_size_ends_with_nocase: String
  propertyDetails_size_not_ends_with: String
  propertyDetails_size_not_ends_with_nocase: String
  propertyDetails_subType: String
  propertyDetails_subType_not: String
  propertyDetails_subType_gt: String
  propertyDetails_subType_lt: String
  propertyDetails_subType_gte: String
  propertyDetails_subType_lte: String
  propertyDetails_subType_in: [String!]
  propertyDetails_subType_not_in: [String!]
  propertyDetails_subType_contains: String
  propertyDetails_subType_contains_nocase: String
  propertyDetails_subType_not_contains: String
  propertyDetails_subType_not_contains_nocase: String
  propertyDetails_subType_starts_with: String
  propertyDetails_subType_starts_with_nocase: String
  propertyDetails_subType_not_starts_with: String
  propertyDetails_subType_not_starts_with_nocase: String
  propertyDetails_subType_ends_with: String
  propertyDetails_subType_ends_with_nocase: String
  propertyDetails_subType_not_ends_with: String
  propertyDetails_subType_not_ends_with_nocase: String
  propertyDetails_zoning: String
  propertyDetails_zoning_not: String
  propertyDetails_zoning_gt: String
  propertyDetails_zoning_lt: String
  propertyDetails_zoning_gte: String
  propertyDetails_zoning_lte: String
  propertyDetails_zoning_in: [String!]
  propertyDetails_zoning_not_in: [String!]
  propertyDetails_zoning_contains: String
  propertyDetails_zoning_contains_nocase: String
  propertyDetails_zoning_not_contains: String
  propertyDetails_zoning_not_contains_nocase: String
  propertyDetails_zoning_starts_with: String
  propertyDetails_zoning_starts_with_nocase: String
  propertyDetails_zoning_not_starts_with: String
  propertyDetails_zoning_not_starts_with_nocase: String
  propertyDetails_zoning_ends_with: String
  propertyDetails_zoning_ends_with_nocase: String
  propertyDetails_zoning_not_ends_with: String
  propertyDetails_zoning_not_ends_with_nocase: String
  propertyDetails_purchaseContract: String
  propertyDetails_purchaseContract_not: String
  propertyDetails_purchaseContract_gt: String
  propertyDetails_purchaseContract_lt: String
  propertyDetails_purchaseContract_gte: String
  propertyDetails_purchaseContract_lte: String
  propertyDetails_purchaseContract_in: [String!]
  propertyDetails_purchaseContract_not_in: [String!]
  propertyDetails_purchaseContract_contains: String
  propertyDetails_purchaseContract_contains_nocase: String
  propertyDetails_purchaseContract_not_contains: String
  propertyDetails_purchaseContract_not_contains_nocase: String
  propertyDetails_purchaseContract_starts_with: String
  propertyDetails_purchaseContract_starts_with_nocase: String
  propertyDetails_purchaseContract_not_starts_with: String
  propertyDetails_purchaseContract_not_starts_with_nocase: String
  propertyDetails_purchaseContract_ends_with: String
  propertyDetails_purchaseContract_ends_with_nocase: String
  propertyDetails_purchaseContract_not_ends_with: String
  propertyDetails_purchaseContract_not_ends_with_nocase: String
  propertyDetails_purchaseContract_: FileInfo_filter
  propertyDetails_deedOrTitle: String
  propertyDetails_deedOrTitle_not: String
  propertyDetails_deedOrTitle_gt: String
  propertyDetails_deedOrTitle_lt: String
  propertyDetails_deedOrTitle_gte: String
  propertyDetails_deedOrTitle_lte: String
  propertyDetails_deedOrTitle_in: [String!]
  propertyDetails_deedOrTitle_not_in: [String!]
  propertyDetails_deedOrTitle_contains: String
  propertyDetails_deedOrTitle_contains_nocase: String
  propertyDetails_deedOrTitle_not_contains: String
  propertyDetails_deedOrTitle_not_contains_nocase: String
  propertyDetails_deedOrTitle_starts_with: String
  propertyDetails_deedOrTitle_starts_with_nocase: String
  propertyDetails_deedOrTitle_not_starts_with: String
  propertyDetails_deedOrTitle_not_starts_with_nocase: String
  propertyDetails_deedOrTitle_ends_with: String
  propertyDetails_deedOrTitle_ends_with_nocase: String
  propertyDetails_deedOrTitle_not_ends_with: String
  propertyDetails_deedOrTitle_not_ends_with_nocase: String
  propertyDetails_deedOrTitle_: FileInfo_filter
  propertyDetails_images: [String!]
  propertyDetails_images_not: [String!]
  propertyDetails_images_contains: [String!]
  propertyDetails_images_contains_nocase: [String!]
  propertyDetails_images_not_contains: [String!]
  propertyDetails_images_not_contains_nocase: [String!]
  propertyDetails_images_: FileInfo_filter
  otherInformation_blockchain: String
  otherInformation_blockchain_not: String
  otherInformation_blockchain_gt: String
  otherInformation_blockchain_lt: String
  otherInformation_blockchain_gte: String
  otherInformation_blockchain_lte: String
  otherInformation_blockchain_in: [String!]
  otherInformation_blockchain_not_in: [String!]
  otherInformation_blockchain_contains: String
  otherInformation_blockchain_contains_nocase: String
  otherInformation_blockchain_not_contains: String
  otherInformation_blockchain_not_contains_nocase: String
  otherInformation_blockchain_starts_with: String
  otherInformation_blockchain_starts_with_nocase: String
  otherInformation_blockchain_not_starts_with: String
  otherInformation_blockchain_not_starts_with_nocase: String
  otherInformation_blockchain_ends_with: String
  otherInformation_blockchain_ends_with_nocase: String
  otherInformation_blockchain_not_ends_with: String
  otherInformation_blockchain_not_ends_with_nocase: String
  otherInformation_wrapper: String
  otherInformation_wrapper_not: String
  otherInformation_wrapper_gt: String
  otherInformation_wrapper_lt: String
  otherInformation_wrapper_gte: String
  otherInformation_wrapper_lte: String
  otherInformation_wrapper_in: [String!]
  otherInformation_wrapper_not_in: [String!]
  otherInformation_wrapper_contains: String
  otherInformation_wrapper_contains_nocase: String
  otherInformation_wrapper_not_contains: String
  otherInformation_wrapper_not_contains_nocase: String
  otherInformation_wrapper_starts_with: String
  otherInformation_wrapper_starts_with_nocase: String
  otherInformation_wrapper_not_starts_with: String
  otherInformation_wrapper_not_starts_with_nocase: String
  otherInformation_wrapper_ends_with: String
  otherInformation_wrapper_ends_with_nocase: String
  otherInformation_wrapper_not_ends_with: String
  otherInformation_wrapper_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DeedMetadata_filter]
  or: [DeedMetadata_filter]
}

enum DeedMetadata_orderBy {
  id
  ownerInformation_type
  ownerInformation_name
  ownerInformation_position
  ownerInformation_entityName
  ownerInformation_entityType
  ownerInformation_ids
  ownerInformation_ids__id
  ownerInformation_ids__name
  ownerInformation_ids__size
  ownerInformation_ids__type
  ownerInformation_ids__timestamp
  ownerInformation_operatingAgreement
  ownerInformation_operatingAgreement__id
  ownerInformation_operatingAgreement__name
  ownerInformation_operatingAgreement__size
  ownerInformation_operatingAgreement__type
  ownerInformation_operatingAgreement__timestamp
  ownerInformation_articleIncorporation
  ownerInformation_articleIncorporation__id
  ownerInformation_articleIncorporation__name
  ownerInformation_articleIncorporation__size
  ownerInformation_articleIncorporation__type
  ownerInformation_articleIncorporation__timestamp
  ownerInformation_proofBill
  ownerInformation_proofBill__id
  ownerInformation_proofBill__name
  ownerInformation_proofBill__size
  ownerInformation_proofBill__type
  ownerInformation_proofBill__timestamp
  ownerInformation_supportingDoc
  propertyDetails_type
  propertyDetails_address
  propertyDetails_city
  propertyDetails_state
  propertyDetails_size
  propertyDetails_subType
  propertyDetails_zoning
  propertyDetails_purchaseContract
  propertyDetails_purchaseContract__id
  propertyDetails_purchaseContract__name
  propertyDetails_purchaseContract__size
  propertyDetails_purchaseContract__type
  propertyDetails_purchaseContract__timestamp
  propertyDetails_deedOrTitle
  propertyDetails_deedOrTitle__id
  propertyDetails_deedOrTitle__name
  propertyDetails_deedOrTitle__size
  propertyDetails_deedOrTitle__type
  propertyDetails_deedOrTitle__timestamp
  propertyDetails_images
  otherInformation_blockchain
  otherInformation_wrapper
}

type FileInfo {
  id: ID!
  name: String!
  size: BigInt!
  type: String!
  timestamp: String!
}

input FileInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  timestamp: String
  timestamp_not: String
  timestamp_gt: String
  timestamp_lt: String
  timestamp_gte: String
  timestamp_lte: String
  timestamp_in: [String!]
  timestamp_not_in: [String!]
  timestamp_contains: String
  timestamp_contains_nocase: String
  timestamp_not_contains: String
  timestamp_not_contains_nocase: String
  timestamp_starts_with: String
  timestamp_starts_with_nocase: String
  timestamp_not_starts_with: String
  timestamp_not_starts_with_nocase: String
  timestamp_ends_with: String
  timestamp_ends_with_nocase: String
  timestamp_not_ends_with: String
  timestamp_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FileInfo_filter]
  or: [FileInfo_filter]
}

enum FileInfo_orderBy {
  id
  name
  size
  type
  timestamp
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  deedEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DeedEntity
  deedEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: DeedEntity_orderBy
    orderDirection: OrderDirection
    where: DeedEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DeedEntity!]!
  deedMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DeedMetadata
  deedMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: DeedMetadata_orderBy
    orderDirection: OrderDirection
    where: DeedMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DeedMetadata!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  approval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Approval
  approvals(
    skip: Int = 0
    first: Int = 100
    orderBy: Approval_orderBy
    orderDirection: OrderDirection
    where: Approval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Approval!]!
  approvalForAll(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApprovalForAll
  approvalForAlls(
    skip: Int = 0
    first: Int = 100
    orderBy: ApprovalForAll_orderBy
    orderDirection: OrderDirection
    where: ApprovalForAll_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ApprovalForAll!]!
  fileInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FileInfo
  fileInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: FileInfo_orderBy
    orderDirection: OrderDirection
    where: FileInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FileInfo!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  deedEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DeedEntity
  deedEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: DeedEntity_orderBy
    orderDirection: OrderDirection
    where: DeedEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DeedEntity!]!
  deedMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DeedMetadata
  deedMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: DeedMetadata_orderBy
    orderDirection: OrderDirection
    where: DeedMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DeedMetadata!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  approval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Approval
  approvals(
    skip: Int = 0
    first: Int = 100
    orderBy: Approval_orderBy
    orderDirection: OrderDirection
    where: Approval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Approval!]!
  approvalForAll(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApprovalForAll
  approvalForAlls(
    skip: Int = 0
    first: Int = 100
    orderBy: ApprovalForAll_orderBy
    orderDirection: OrderDirection
    where: ApprovalForAll_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ApprovalForAll!]!
  fileInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FileInfo
  fileInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: FileInfo_orderBy
    orderDirection: OrderDirection
    where: FileInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FileInfo!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transfer {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  tokenId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Transfer_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  from
  to
  tokenId
  blockNumber
  blockTimestamp
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}